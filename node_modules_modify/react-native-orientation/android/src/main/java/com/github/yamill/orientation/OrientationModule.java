package com.github.yamill.orientation;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.ActivityInfo;
import android.content.res.Configuration;
import android.hardware.SensorManager;
import android.provider.Settings;
import android.util.Log;
import android.view.OrientationEventListener;

import com.facebook.common.logging.FLog;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.LifecycleEventListener;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.common.ReactConstants;
import com.facebook.react.modules.core.DeviceEventManagerModule;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Nullable;

public class OrientationModule extends ReactContextBaseJavaModule implements LifecycleEventListener{
    final BroadcastReceiver receiver;
    private boolean mReceiverTag = false;   //防止多次注册注销广播接收器
    OrientationEventListener mOrientationListener;
    static boolean isClickButtonOfChangeScreenOrientation = false;
    boolean isLandscape = false;
    private final ReactApplicationContext ctx;

    private void setClickButtonOfChangeScreenOrientationState(boolean b) {
        isClickButtonOfChangeScreenOrientation = b;
    }

    private boolean getClickButtonOfChangeScreenOrientationState() {
        return isClickButtonOfChangeScreenOrientation;
    }

    public OrientationModule(ReactApplicationContext reactContext) {
        super(reactContext);
        ctx = reactContext;

        receiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {

                Configuration newConfig = intent.getParcelableExtra("newConfig");
                String orientationValue = newConfig.orientation == 1 ? "PORTRAIT" : "LANDSCAPE";

                WritableMap params = Arguments.createMap();
                params.putString("orientation", orientationValue);

                if (ctx.hasActiveCatalystInstance()) {
                    ctx
                    .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                    .emit("orientationDidChange", params);
                }
            }
        };
        ctx.addLifecycleEventListener(this);


        mOrientationListener = new OrientationEventListener(reactContext,
                SensorManager.SENSOR_DELAY_NORMAL) {

            @Override
            public void onOrientationChanged(int rotation) {
                if (!getClickButtonOfChangeScreenOrientationState()) return;

                final Activity activity = getCurrentActivity();
                if (activity == null) {
                    return;
                }

                if ( ((rotation > 80 && rotation < 100) || (rotation > 260 && rotation < 280)) && !isLandscape) {
                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
                    isLandscape = true;
                    setClickButtonOfChangeScreenOrientationState(false);
                    Log.d("MainActivity","Landscape");
                }
                else if ( ((rotation > 350 || rotation < 10) || (rotation > 170 && rotation < 190)) && isLandscape ) {
                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
                    isLandscape = false;
                    setClickButtonOfChangeScreenOrientationState(false);
                    Log.d("MainActivity","Portrait");
                }
                Log.d("MainActivity", Integer.toString(rotation));

            }
        };

        if (mOrientationListener.canDetectOrientation()) {
            mOrientationListener.enable();
        } else {
            mOrientationListener.disable();
        }
    }

    @Override
    public String getName() {
        return "Orientation";
    }

    @ReactMethod
    public void manualChangeScreenDirection(Boolean isV) {

        setClickButtonOfChangeScreenOrientationState(true);

        if (isV) {
            lockToLandscape();
        }
        else {
            lockToPortrait();
        }

    }

    @ReactMethod
    public void getOrientation(Callback callback) {
        final int orientationInt = getReactApplicationContext().getResources().getConfiguration().orientation;

        String orientation = this.getOrientationString(orientationInt);

        if (orientation == "null") {
            callback.invoke(orientationInt, null);
        } else {
            callback.invoke(null, orientation);
        }
    }
    @ReactMethod
    public void getSettingOrientationStatus(Callback callback) {

            ContentResolver resolver = getCurrentActivity().getContentResolver();
                try {
                    int status = Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION);
                    callback.invoke(null, status);
                    } catch (Settings.SettingNotFoundException e) {
                        callback.invoke(null, 3);

                    }
    }
    @ReactMethod
    public void lockToPortrait() {
        final Activity activity = getCurrentActivity();
        if (activity == null) {
            return;
        }
        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT);
    }

    @ReactMethod
    public void lockToLandscape() {
        final Activity activity = getCurrentActivity();
        if (activity == null) {
            return;
        }
        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
    }

    @ReactMethod
    public void lockToLandscapeLeft() {
        final Activity activity = getCurrentActivity();
        if (activity == null) {
            return;
        }
        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
    }

    @ReactMethod
    public void lockToLandscapeRight() {
        final Activity activity = getCurrentActivity();
        if (activity == null) {
            return;
        }
        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
    }

    @ReactMethod
    public void unlockAllOrientations() {
        final Activity activity = getCurrentActivity();
        if (activity == null) {
            return;
        }
        activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
    }

    @Override
    public @Nullable Map<String, Object> getConstants() {
        HashMap<String, Object> constants = new HashMap<String, Object>();
        int orientationInt = getReactApplicationContext().getResources().getConfiguration().orientation;

        String orientation = this.getOrientationString(orientationInt);
        if (orientation == "null") {
            constants.put("initialOrientation", null);
        } else {
            constants.put("initialOrientation", orientation);
        }

        return constants;
    }

    private String getOrientationString(int orientation) {
        if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
            return "LANDSCAPE";
        } else if (orientation == Configuration.ORIENTATION_PORTRAIT) {
            return "PORTRAIT";
        } else if (orientation == Configuration.ORIENTATION_UNDEFINED) {
            return "UNKNOWN";
        } else {
            return "null";
        }
    }

    @Override
    public void onHostResume() {
        final Activity activity = getCurrentActivity();

        assert activity != null;
        if (!mReceiverTag) {
            activity.registerReceiver(receiver, new IntentFilter("onConfigurationChanged"));
            mReceiverTag = true;
        }
        mOrientationListener.enable();
    }
    @Override
    public void onHostPause() {
        final Activity activity = getCurrentActivity();
        if (activity == null) return;
        try
        {
            if (mReceiverTag) {
                activity.unregisterReceiver(receiver);
                mReceiverTag = false;
            }
        }
        catch (java.lang.IllegalArgumentException e) {
            FLog.e(ReactConstants.TAG, "receiver already unregistered", e);
        }
        mOrientationListener.disable();
    }

    @Override
    public void onHostDestroy() {
        final Activity activity = getCurrentActivity();
        if (activity == null) return;
        try
        {
            if (mReceiverTag) {
                activity.unregisterReceiver(receiver);
                mReceiverTag = false;
            }
        }
        catch (java.lang.IllegalArgumentException e) {
            FLog.e(ReactConstants.TAG, "receiver already unregistered", e);
        }
        mOrientationListener.disable();
    }

}


