
#import "RNCustomKeyboard.h"
#import <React/RCTBridge+Private.h>
#import <React/RCTUIManager.h>
#import <UIKit/UIKit.h>

@implementation RNCustomKeyboard

@synthesize bridge = _bridge;

- (dispatch_queue_t)methodQueue {
    return dispatch_get_main_queue();
}

static inline UITextField *getTextFieldFromContainerView(UIView *containerView) {
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wundeclared-selector"
    UITextField *textField = [containerView valueForKey:NSStringFromSelector(@selector(_backedTextInputView))];
#pragma clang diagnostic pop
    return (UITextField *)textField;
}

RCT_EXPORT_MODULE(CustomKeyboard)

RCT_EXPORT_METHOD(install:(nonnull NSNumber *)reactTag withType:(nonnull NSString *)keyboardType) {
    UIView *inputView = [[RCTRootView alloc] initWithBridge:_bridge.parentBridge moduleName:@"CustomKeyboard" initialProperties:
                         @{@"tag": reactTag,
                           @"type": keyboardType}
                         ];
    inputView.autoresizingMask = UIViewAutoresizingNone;
    inputView.frame = CGRectMake(0, 0, [UIScreen mainScreen].bounds.size.width, 252);

    UIView *view = [_bridge.uiManager viewForReactTag:reactTag];
    if ([view isKindOfClass:NSClassFromString(@"RCTTextView")]) {
        ((UITextView *)view).inputView = inputView;
    } else if ([view isKindOfClass:NSClassFromString(@"RCTSinglelineTextInputView")]) {
        UITextField *ui_textField = getTextFieldFromContainerView(view);
        ui_textField.inputView = inputView;
    }
    [view reloadInputViews];
}

RCT_EXPORT_METHOD(uninstall:(nonnull NSNumber *)reactTag) {
    UIView *view = (UIView *)[_bridge.uiManager viewForReactTag:reactTag];
    UITextField *ui_textField = getTextFieldFromContainerView(view);
    ui_textField.inputView = nil;
    [view reloadInputViews];
}

RCT_EXPORT_METHOD(insertText:(nonnull NSNumber *)reactTag withText:(NSString*)text) {
    UIView *view = (UIView *)[_bridge.uiManager viewForReactTag:reactTag];
    UITextField *ui_textField = getTextFieldFromContainerView(view);
    [ui_textField replaceRange:ui_textField.selectedTextRange withText:text];
}

RCT_EXPORT_METHOD(backSpace:(nonnull NSNumber *)reactTag) {
    UIView *view = (UIView *)[_bridge.uiManager viewForReactTag:reactTag];
    UITextField *ui_textField = getTextFieldFromContainerView(view);
    UITextRange *range = ui_textField.selectedTextRange;
    if ([ui_textField comparePosition:range.start toPosition:range.end] == 0) {
        range = [ui_textField textRangeFromPosition:[ui_textField positionFromPosition:range.start offset:-1] toPosition:range.start];
    }
    [ui_textField replaceRange:range withText:@""];
}

RCT_EXPORT_METHOD(doDelete:(nonnull NSNumber *)reactTag) {
    UIView *view = (UIView *)[_bridge.uiManager viewForReactTag:reactTag];
    UITextField *ui_textField = getTextFieldFromContainerView(view);
    UITextRange *range = ui_textField.selectedTextRange;
    if ([ui_textField comparePosition:range.start toPosition:range.end] == 0) {
        range = [ui_textField textRangeFromPosition:range.start toPosition:[ui_textField positionFromPosition: range.start offset: 1]];
    }
    [ui_textField replaceRange:range withText:@""];
}

RCT_EXPORT_METHOD(moveLeft:(nonnull NSNumber *)reactTag) {
    UIView *view = (UIView *)[_bridge.uiManager viewForReactTag:reactTag];
    UITextField *ui_textField = getTextFieldFromContainerView(view);
    UITextRange *range = ui_textField.selectedTextRange;
    UITextPosition *position = range.start;
    if ([ui_textField comparePosition:range.start toPosition:range.end] == 0) {
        position = [ui_textField positionFromPosition:position offset:-1];
    }
    ui_textField.selectedTextRange = [ui_textField textRangeFromPosition:position toPosition:position];
}

RCT_EXPORT_METHOD(moveRight:(nonnull NSNumber *)reactTag) {
    UIView *view = (UIView *)[_bridge.uiManager viewForReactTag:reactTag];
    UITextField *ui_textField = getTextFieldFromContainerView(view);
    UITextRange *range = ui_textField.selectedTextRange;
    UITextPosition *position = range.end;
    if ([ui_textField comparePosition:range.start toPosition:range.end] == 0) {
        position = [ui_textField positionFromPosition:position offset:1];
    }
    ui_textField.selectedTextRange = [ui_textField textRangeFromPosition: position toPosition:position];
}

RCT_EXPORT_METHOD(switchSystemKeyboard:(nonnull NSNumber*) reactTag) {
    UIView *view = [_bridge.uiManager viewForReactTag:reactTag];
    UITextField *ui_textField = getTextFieldFromContainerView(view);
    UIView *inputView = ui_textField.inputView;
    ui_textField.inputView = nil;
    [ui_textField reloadInputViews];
    ui_textField.inputView = inputView;
}

@end



