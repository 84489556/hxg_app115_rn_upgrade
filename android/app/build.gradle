/**   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // https://facebook.github.io/react-native/docs/performance#enable-the-ram-format
 *   bundleCommand: "ram-bundle",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 */

apply plugin: "com.android.application"
apply plugin: 'io.objectbox'
apply plugin: 'com.sensorsdata.analytics.android'

project.ext.react = [
        entryFile: "index.js",
        enableHermes: false,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'
/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", true)

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    useLibrary'org.apache.http.legacy'
    defaultConfig {
        applicationId "com.yuanda.cy_professional_select_stock"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1816
        versionName "1.2.4"
        multiDexEnabled true
        ndk {
            //abiFilters "armeabi-v7a","x86"
            abiFilters "armeabi-v7a"
        }
        externalNativeBuild {
//            cmake {
//                cppFlags "-std=c++14 -frtti -fexceptions -pthread"
//                abiFilters "armeabi-v7a","x86"
//            }
        }

        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "debug"]//添加一个默认渠道号
        flavorDimensions "default"
    }

//    dexOptions {
//        incremental true
//        javaMaxHeapSize "4g"
//    }

    android {
        lintOptions {
            checkReleaseBuilds false
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
        }
    }
     packagingOptions {
            pickFirst 'lib/x86/libc++_shared.so'
            pickFirst 'lib/arm64-v8a/libc++_shared.so'
            pickFirst 'lib/x86_64/libc++_shared.so'
            pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        }

    externalNativeBuild {
//         cmake {
//             path 'CMakeLists.txt'
//         }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            //include "armeabi-v7a","x86"
            include "armeabi-v7a"
        }
    }
    signingConfigs {
        release {
            storeFile file("huixuangu-release-key.keystore")
            storePassword "yuanda"
            keyAlias "huixuangu-key-alias"
            keyPassword "yuanda"
        }
    }
    sourceSets {
    main {
    jni.srcDirs = []
    }
    }
    buildTypes {
//        debug{
//            debuggable false
//            minifyEnabled enableProguardInReleaseBuilds
//            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
//            signingConfig signingConfigs.release
//        }
        release {
            debuggable false
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }

    repositories {  //本地aar方式
        flatDir {
            dirs '../FMLivePlayer/libs'  //从module里面引用aar
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

//    productFlavors {
//        yd_debug {}

//        anzhi {}
//        baidu {}
//        huawei {}
//        lianxiangle {}
//        meizu {}
//        oppo {}
//        shichang_360 {}
//        vivo {}
//        wandoujia {}
//        xiaomi {}
//        yidong_mm {}
//        yingyongbao {}
//        sougou {}
//        apptuiguang {}
    //      toutiao {}


//        lequ {}
//        shichang_2345 {}
//        yd_guanwang {}
//        jifeng {}
//        mumayi {}
//        sanxing {}
//        nubiya {}
//        jinli {}
//        kupai {}
//        zhuoyi {}
//        n_duo {}
//        lianxiang {}
//        chuizi {}
//        sougou {}
//    }
//注意我注释掉的，可以去掉注释，那样的话，下面这句就可以不用了
//    productFlavors.all {
//       flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//    }

}

dependencies {
    implementation project(':react-native-fast-image')
    implementation project(':react-native-pdf')

    implementation project(':progress-view')
    implementation project(':progress-bar-android')
   // implementation project(':react-native-fetch-blob')
    //    implementation project(':react-native-vector-icons')
    implementation project(':ydsdk')
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleCompatible
  //  implementation 'com.android.support:appcompat-v7:28.+'
 //   implementation 'com.android.support:support-v4:28.0.0'
 //   implementation 'com.android.support:design:28.0.0'
    implementation 'com.facebook.react:react-native:+'
    // From node_modules

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }

    implementation project(':FMLivePlayer')//网易云播放器
   // implementation project(':rtmpResourceLib')//20200323注释
    implementation project(':react-native-orientation')
  //  implementation files('libs/Native_Libs2.jar')//20200323注释
   // implementation files('libs/open_sdk_r5923_lite.jar')
   // implementation 'com.github.barteksc:android-pdf-viewer:2.7.0'
    //implementation 'com.squareup.okhttp:okhttp:2.7.5' //20200414注释
    implementation 'com.umeng.analytics:analytics:latest.integration'
    api files('libs/open_sdk_r5923_lite.jar')
    api files('libs/SocialSDK_QQ_Full.jar')
    api files('libs/SocialSDK_Sina_Full.jar')
    api files('libs/SocialSDK_WeiXin_Full.jar')
    api files('libs/umeng_social_api.jar')
    api files('libs/umeng_social_net.jar')
    api files('libs/umeng_social_tool.jar')
    api files('libs/wechat-sdk-android-with-mta-1.1.6.jar')
    api files('libs/weiboSDKCore.jar')
    api files('libs/umeng-common-2.1.8.jar')
    implementation files('libs/MiPush_SDK_Client_3_7_0.jar')
    implementation project(':react-native-custom-keyboard')
    implementation project(':dzhchart')
   // implementation project(':react-native-pdf-view')
    implementation project(path: ':react-native-webview-android')

    //如果你需要支持 gif动图
    implementation "com.facebook.fresco:animated-gif:2.0.0"
    compile project(':livemodule')


    //获得场景视频SDK，必须引入
    implementation 'com.bokecc:vod:3.4.0'
    //播放加密视频必须引用http和drmv6
    implementation 'com.bokecc:http:1.2.0'
    implementation 'com.bokecc:drmv6:2.19.0'
    //使用DWIjkMediaPlayer 倍速播放器引入
//    implementation 'com.bokecc:speedplay:2.19.3'
    implementation 'com.sensorsdata.analytics.android:SensorsAnalyticsSDK:4.0.8'

    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)


// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
//task copyDownloadableDepsToLibs(type: Copy) {
//    from configurations.compile
//    into 'libs'
//}
